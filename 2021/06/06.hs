import           Control.Arrow
import           Data.List (foldl')
import           Data.List.Split (splitOn)

main = interact $
  splitOn "," >>> map read >>> applyAll [solveA,solveB] >>> map show >>> unlines

solveA, solveB :: [Int] -> Int
solveA = (!!80) . lanternfishFrom
solveB = (!!256) . lanternfishFrom

------------------------------------------------------------

-- The number of lanternfish on each day generated by a single
-- lanternfish starting with internal counter 8.
lanternfish :: [Int]
lanternfish = replicate 9 1 ++ zipWith (+) lanternfish (drop 2 lanternfish)

-- The number of lanternfish on each day, starting from a list of lanternfish
-- with specified internal counters.
lanternfishFrom :: [Int] -> [Int]
lanternfishFrom = foldl' (zipWith (+)) (repeat 0) . map (\c -> drop (8-c) lanternfish)

------------------------------------------------------------

applyAll :: [a -> b] -> a -> [b]
applyAll fs a = map ($ a) fs
